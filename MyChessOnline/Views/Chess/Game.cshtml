@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    var game = (Game)ViewBag.Game;
    var game_id = game.Id;
}

<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="~/js/microsoft/signalr/dist/browser/signalr.js"></script>
<link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
<script src="~/js/chess/chess.js/chess.js"></script>


<div class="row mb-5">
    <div class="col-8">
        <div class="body_chess">
            <div class="board">
            </div>
        </div>
    </div>
    <div class="col-4">
        <div class="row">
            <div class="md-12">
                <div class="stat" id="about game">
                    <div class="jumbotron">
                        <h3 class="display-5">Информация об игре</h3>
                        <hr class="my-2">
                        <div>Идентификатор игры: <span id="GameId">@game_id</span></div>
                        <div id="IsYourMove" hidden>@ViewBag.IsYourMove</div>
                        <div>
                            @if(ViewBag.IsYourMove == 1)
                            {
                                <div>
                                   Ваш ход
                                </div>
                            }
                            else
                            {
                                <div>
                                  Ходит противник
                                </div>
                            }
                        </div>
                        <div>
                            Ваш цвет: <span id="YourColor">@ViewBag.YourColor</span>
                        </div>
                        
                        <div hidden>
                            Индификатор FEN: <span id="GameFen">@game.Fen</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="md-12">
                <aside>
                    <div class="chat bootstrap snippets bootdey">
                        <div class="row">
                            <div class="message-wrap col-md-8">
                                <div class="wrap_Scrollbottom container_Scrollbottom">
                                    <div id="msg-atr" class="msg-wrap"></div>
                                    <div class="wrapper_prokrutka"></div>
                                </div>
                            </div>
                            
                            <div class="chat__input">
                                <div class="send-wrap ">
                                    <input id="message" class="form-control send-message" rows="3" placeholder="Ваше сообщение"></input>
                                </div>
                                <div class="btn-panel">
                                    <button id="sendBtn" class="btn btn-success" role="button">
                                        <i class="fa fa-share"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </aside>
            </div>
        </div>
    </div>
</div>



<script>



    function lastMessageScroll(b) {
        var e = document.querySelector('.wrapper_prokrutka');
        if (!e) return;

        e.scrollIntoView({
            behavior: b || 'auto',
            block: 'end',
        });
    }
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/Home/Chess/Game")
        .build();

    async function start() {
        try {
            await hubConnection.start();
            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };
    start();


    async function enter() {
        try {
            await hubConnection.invoke('Enter', "@game_id");
            console.log("Player connected.");
        } catch (err) {
            console.log(err);
            setTimeout(enter, 5000);
        }
    };
    enter();

    hubConnection.on('NextGame', function (status_next, game_next) {//Если следующая игра.
        alert("Перейдите на следующую игру , " +status_next+ "game next:"+ game_next);
    });
    var conid;
    // получение сообщения от сервера
    hubConnection.on('Receive', function (message, user, connectionId) {
        let msg = document.createElement("div")
        msg.className = 'media msg message'
        let a = document.createElement('a')
        a.className = 'pull-left'
        a.href = '#'
        let img = document.createElement("img")
        img.className = 'media-object    img-circle'
        img.style = 'width: 32px; height: 32px;'
        img.src = 'https://bootdey.com/img/Content/user_2.jpg'
        a.appendChild(img)
        msg.appendChild(a);
        let div_body = document.createElement("div")
        div_body.className = "media-body"
        let name = document.createElement("small")
        name.className = 'media-heading'
        let mess = document.createElement("small")
        mess.className = 'col-md-10 text-muted'

        name.textContent = user != null ? user : "anonym";
        mess.textContent = message
        div_body.appendChild(name);
        div_body.appendChild(mess);
        msg.appendChild(div_body);
        document.getElementById("msg-atr").appendChild(msg);
        lastMessageScroll('smooth');
        /*let userNameElem = document.createElement("b")
        //userNameElem.appendChild(document.createTextNode(connectionId + ": "));
        userNameElem.appendChild(document.createTextNode(user + ": "));
        conid = connectionId;
        // создает элемент <p> для сообщения пользователя
        /*let elem = document.createElement("p");
        elem.appendChild(userNameElem);
        elem.appendChild(document.createTextNode(message));
        var firstElem = document.getElementById("chatroom").firstChild;
        document.getElementById("chatroom").insertBefore(elem, firstElem);*/
    });

    hubConnection.on('Notify', function (message) {

        // добавляет элемент для диагностического сообщения
        let notifyElem = document.createElement("b");
        notifyElem.appendChild(document.createTextNode(message));
        let elem = document.createElement("p");
        elem.appendChild(notifyElem);
        var firstElem = document.getElementById("chatroom").firstChild;
        document.getElementById("chatroom").insertBefore(elem, firstElem);
    });

    // отправка сообщения на сервер
    document.getElementById("sendBtn").addEventListener("click", function (e) {
        let message = document.getElementById("message").value;
        hubConnection.invoke('Send', message, '@ViewData["name"]');
    });
    hubConnection.on('IsYourMove', function (message, is_your_move, connectionId) {

    });



    hubConnection.on('YouWin', function (message, user, connectionId) { });


    hubConnection.on('YouLose', function (message, user, connectionId) { });

</script>

<script src="~/js/chess.js"></script>